<?xml version="1.0"?>
<rss version="2.0">

<channel>
	<title>Planet Eclipse</title>
	<link>http://planeteclipse.org/planet/</link>
	<language>en</language>
	<description>Planet Eclipse - http://planeteclipse.org/planet/</description>

<item>
	<title>vert.x project: Vert.x 3.5.0.Beta1</title>
	<guid isPermaLink="true">http://vertx.io/blog/vert-x-3-5-0-beta1</guid>
	<link>http://vertx.io/blog/vert-x-3-5-0-beta1</link>
	<description>&lt;article&gt;&lt;p&gt;it’s summer time and we have just released Vert.x 3.5.0.Beta1!&lt;/p&gt;
&lt;h3 id=&quot;let-s-go-rxjava2&quot;&gt;Let’s go RxJava2&lt;/h3&gt;
&lt;p&gt;First and foremost this release delivers the RxJava2 API with support of its full range of types.&lt;/p&gt;
&lt;p&gt;In addition of &lt;code&gt;Single&lt;/code&gt;, Rxified APIs expose also the&lt;code&gt;Completable&lt;/code&gt; and &lt;code&gt;Maybe&lt;/code&gt; types&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;// expose &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;Void&lt;/span&gt;&amp;gt;&amp;gt;
&lt;span class=&quot;hljs-type&quot;&gt;Completable&lt;/span&gt; completable = server.rxClose();

completable.subscribe(() -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;closed&quot;&lt;/span&gt;));

// expose &lt;span class=&quot;hljs-type&quot;&gt;Handler&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;AsyncResult&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&amp;gt;&amp;gt; where the &lt;span class=&quot;hljs-literal&quot;&gt;result&lt;/span&gt; can be null
&lt;span class=&quot;hljs-type&quot;&gt;Maybe&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-type&quot;&gt;String&lt;/span&gt;&amp;gt; ipAddress = dnsClient.rxLookup(&lt;span class=&quot;hljs-string&quot;&gt;&quot;www.google.com&quot;&lt;/span&gt;);
ipAddress.subscribe(
  value -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;resolved to &quot;&lt;/span&gt; + value),
  err -&amp;gt; err.printStackTrace(),
  () -&amp;gt; &lt;span class=&quot;hljs-type&quot;&gt;System&lt;/span&gt;.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;does not resolve&quot;&lt;/span&gt;));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;RxJava augments Vert.x streams with a &lt;code&gt;toObservable()&lt;/code&gt; method, RxJava2 adds the &lt;code&gt;toFlowable()&lt;/code&gt; method:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;&lt;span class=&quot;hljs-prompt&quot;&gt;// Flowable&lt;/span&gt; maps to a &lt;span class=&quot;hljs-constant&quot;&gt;ReadStream&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-constant&quot;&gt;Buffer&lt;/span&gt;&amp;gt;
&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; back-pressured stream
&lt;span class=&quot;hljs-prompt&quot;&gt;Flowable&lt;/span&gt; flowable = asyncFile.toFlowable();

&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; but we still can get an &lt;span class=&quot;hljs-constant&quot;&gt;Observable&lt;/span&gt;&amp;lt;&lt;span class=&quot;hljs-constant&quot;&gt;Buffer&lt;/span&gt;&amp;gt;
&lt;span class=&quot;hljs-regexp&quot;&gt;//&lt;/span&gt; non back-pressured stream
&lt;span class=&quot;hljs-prompt&quot;&gt;Observable&lt;/span&gt; flowable = asyncFile.toObservable();&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What’s so different between &lt;code&gt;Flowable&lt;/code&gt; and &lt;code&gt;Observable&lt;/code&gt; ? the former handles back-pressure, i.e the
subscriber can control the flow of items and the later can not!!!&lt;/p&gt;
&lt;p&gt;You can read the documentation in the beta section of the &lt;a href=&quot;http://vertx.io/docs/3.5.0.Beta1/vertx-rx/java2/&quot;&gt;docs&lt;/a&gt;
or go straight to the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/3.5.0.beta1/rxjava2-examples&quot;&gt;examples&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;mqtt-client&quot;&gt;MQTT Client&lt;/h3&gt;
&lt;p&gt;In Vert.x 3.4 we added the MQTT server, 3.5 completes the MQTT story with the MQTT client:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;MqttClient mqttClient = MqttClient.create(vertx,
   &lt;span class=&quot;hljs-keyword&quot;&gt;new&lt;/span&gt; MqttClientOptions()
     .setPort(BROKER_PORT)
     .setHost(BROKER_HOST)).connect(ar -&amp;gt;
  &lt;span class=&quot;hljs-keyword&quot;&gt;if&lt;/span&gt; (ar.succeeded()) {
    System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Connected to a server&quot;&lt;/span&gt;);

    mqttClient.publish(
      MQTT_TOPIC,
      Buffer.buffer(MQTT_MESSAGE),
      MqttQoS.AT_MOST_ONCE,
      &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;,
      &lt;span class=&quot;hljs-keyword&quot;&gt;false&lt;/span&gt;,
      s -&amp;gt; mqttClient.disconnect(d -&amp;gt; System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Disconnected from server&quot;&lt;/span&gt;)));
  } &lt;span class=&quot;hljs-keyword&quot;&gt;else&lt;/span&gt; {
    System.&lt;span class=&quot;hljs-keyword&quot;&gt;out&lt;/span&gt;.println(&lt;span class=&quot;hljs-string&quot;&gt;&quot;Failed to connect to a server&quot;&lt;/span&gt;);
    ar.cause().printStackTrace();
  }
});&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find MQTT client and server examples &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/3.5.0.beta1/mqtt-examples&quot;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;auth-handler-chaining&quot;&gt;Auth handler chaining&lt;/h3&gt;
&lt;p&gt;There are times when you want to support multiple authN/authZ mechanisms in a single application.&lt;/p&gt;
&lt;p&gt;Vert.x Web supports auth handlers &lt;a href=&quot;http://vertx.io/docs/3.5.0.Beta1/vertx-web/java/#_chaining_multiple_auth_handlers&quot;&gt;chaining&lt;/a&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;hljs&quot;&gt;ChainAuthHandler chain = ChainAuthHandler.create();

&lt;span class=&quot;hljs-comment&quot;&gt;// add http basic auth handler to the chain&lt;/span&gt;
chain.&lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(BasicAuthHandler.create(provider));

&lt;span class=&quot;hljs-comment&quot;&gt;// add form redirect auth handler to the chain&lt;/span&gt;
chain.&lt;span class=&quot;hljs-built_in&quot;&gt;append&lt;/span&gt;(RedirectAuthHandler.create(provider));

&lt;span class=&quot;hljs-comment&quot;&gt;// secure your route&lt;/span&gt;
router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/secure/resource&quot;&lt;/span&gt;).handler(chain);

&lt;span class=&quot;hljs-comment&quot;&gt;// your app&lt;/span&gt;
router.route(&lt;span class=&quot;hljs-string&quot;&gt;&quot;/secure/resource&quot;&lt;/span&gt;).handler(ctx -&amp;gt; {
  &lt;span class=&quot;hljs-comment&quot;&gt;// do something...&lt;/span&gt;
});&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;finally&quot;&gt;Finally&lt;/h3&gt;
&lt;p&gt;this beta also provides&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Vert.x Config stores for Vault and Consul&lt;/li&gt;
&lt;li&gt;Upgrade to Hazelcast 3.8.2&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;use-it-&quot;&gt;Use it!&lt;/h3&gt;
&lt;p&gt;You can use and consume it in your projects from Maven or Gradle as usual with the version &lt;code&gt;3.5.0.Beta1&lt;/code&gt; or read&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;the &lt;a href=&quot;http://vertx.io/docs/index-beta.html&quot;&gt;documentation preview&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;see the &lt;a href=&quot;https://github.com/vert-x3/vertx-examples/tree/3.5.0.beta1&quot;&gt;examples&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can also download various binaries from Maven Central:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://search.maven.org/remotecontent?filepath=io/vertx/vertx-stack-manager/3.5.0.Beta1/vertx-stack-manager-3.5.0.Beta1.tar.gz&quot;&gt;base distrib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://search.maven.org/remotecontent?filepath=io/vertx/vertx-stack-manager/3.5.0.Beta1/vertx-stack-manager-3.5.0.Beta1-full.tar.gz&quot;&gt;full distrib&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://search.maven.org/remotecontent?filepath=io/vertx/vertx-stack-manager/3.5.0.Beta1/vertx-stack-manager-3.5.0.Beta1-docs.zip&quot;&gt;docs zip&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://search.maven.org/remotecontent?filepath=io/vertx/vertx-stack-manager/3.5.0.Beta1/vertx-stack-manager-3.5.0.Beta1-stack-scala.tar.gz&quot;&gt;scala distrib&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;as usual feedback is very important to us and one goal of this beta release is to let the community
provide early feedback!&lt;/p&gt;
&lt;p&gt;The final is expected at the beginning of October.&lt;/p&gt;
&lt;p&gt;Enjoy&lt;/p&gt;
&lt;/article&gt;</description>
	<pubDate>Fri, 10 Aug 2018 00:00:00 +0000</pubDate>
</item>
<item>
	<title>Tom Schindl: Introducing (another/additional) JavaFX TestFramework</title>
	<guid isPermaLink="false">http://tomsondev.bestsolution.at/?p=5078</guid>
	<link>https://tomsondev.bestsolution.at/2017/08/13/introducing-anotheradditional-javafx-testframework/</link>
	<description>&lt;p&gt;Let me start with the statement that &lt;a href=&quot;https://github.com/TestFX/TestFX&quot;&gt;TestFX&lt;/a&gt; is somewhat the default JUnit-Testframework for JavaFX application and is what we proposed to use to all our customers and our projects until today where we introduce our own one.&lt;/p&gt;
&lt;p&gt;There are 2 different problem vectors we have:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;A licensing issue we have with it at &lt;a href=&quot;http://eclipse.org/&quot;&gt;Eclipse.org&lt;/a&gt;&lt;/strong&gt;: TestFX is licensed under &lt;a href=&quot;https://en.wikipedia.org/wiki/European_Union_Public_Licence&quot;&gt;EUPL&lt;/a&gt; which to me as a software developer looks ok but it looks like the IP-Department at &lt;a href=&quot;http://eclipse.org/&quot;&gt;Eclipse.org&lt;/a&gt; is not happy about it and refused me to use it. I don’t blame anyone but need to cope with the situation as is!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Implementing JUnit-Tests for OSGi-JavaFX applications&lt;/strong&gt;: This is a pure technical issue and something we could have solved (although it would have meant to change the way TestFX works) but after having hit the licensing problem my motivation to resolve that problem was not really there&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Anyways let’s look at what I’ve started to implement as a replacement for TestFX.&lt;/p&gt;
&lt;h2&gt;BestSolution FX-Test&lt;/h2&gt;
&lt;p&gt;First of all we decided for now that we don’t integrate the test-framework into &lt;a href=&quot;http://efxclipse.org/&quot;&gt;e(fx)clipse&lt;/a&gt; but treat it as an independent entity at &lt;a href=&quot;https://github.com/BestSolution-at/FX-Test&quot;&gt;github&lt;/a&gt; and release it under EPL from there.&lt;/p&gt;
&lt;p&gt;Writing JUnit-Tests is done by subclassing a base class (current only one available is &lt;code&gt;FXComponentTest&lt;/code&gt;) and implementing your JUnit-Tests might look like this:&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;@Test
public void sample() {
  // Search with a css-selector query
  // and generated a click on the button
  rcontroller().cssFirst(&quot;.button&quot;).get().click();
}
&lt;/pre&gt;
&lt;p&gt;In contrast to TestFX, tests written with our API can not run directly but you need to decided if you want to:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Use a specific runner using &lt;code&gt;@RunWith(FXRunner.class)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Use a Rule &lt;code&gt;@FXTest&lt;/code&gt; and annotate all UI-Test methods with it&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;which on the plus-side means that the &lt;code&gt;@Test&lt;/code&gt;-methods are executed on the JavaFX-UI-Thread (unlike TestFX where they are executed on another thread most like the main-thread)&lt;/p&gt;
&lt;p&gt;For more information that a look at the project &lt;a href=&quot;https://github.com/BestSolution-at/FX-Test/blob/master/README.md&quot;&gt;README.md&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Let me close this post saying that we are very early in the development and things are still in the flux so we are happy for any feedback we get.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/tomsondev.wordpress.com/5078/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/tomsondev.wordpress.com/5078/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=tomsondev.bestsolution.at&amp;amp;blog=7995503&amp;amp;post=5078&amp;amp;subd=tomsondev&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 13 Aug 2017 19:56:48 +0000</pubDate>
</item>
<item>
	<title>Ian Skerrett: Eclipse IoT in London</title>
	<guid isPermaLink="false">http://ianskerrett.wordpress.com/?p=4183</guid>
	<link>http://feedproxy.google.com/~r/IanSkerrett/~3/41A5UdYGYl0/</link>
	<description>&lt;p&gt;Once again we are hosting an Eclipse IoT Day in London on September 11. Like last year, we are co-locating with the awesome &lt;a href=&quot;http://thingmonk.com/&quot;&gt;Thingmonk &lt;/a&gt;event, one of my favourite IoT events of the year. &lt;a href=&quot;http://thingmonk.com/&quot;&gt;Thingmonk &lt;/a&gt;brings together some of the &lt;a href=&quot;http://thingmonk.com/index.html#speakers&quot;&gt;best thinkers in IoT&lt;/a&gt; so it is always a great chance to learn and network. If you are serious about IoT, you need to attend this event.&lt;/p&gt;
&lt;p&gt;Like last year, we are doing a half-day Eclipse IoT Day as the pre-conference event for Thingmonk. We have put together a pretty awesome set of speakers to showcase what is going on in the Eclipse IoT community. Check out the line-up:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://thingmonk.com/eclipse-day-talks.html#icraggs&quot;&gt;Ian Craggs&lt;/a&gt;, from IBM and the Eclipse Paho project, will be laying out the plans to support the new MQTT 5 specification. MQTT 5 is a major up-level of the MQTT spec so the Eclipse Paho plans and this presentation will be relevant for anyone using MQTT.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://thingmonk.com/eclipse-day-talks.html#hirschmicha&quot;&gt;Michael Hirsch&lt;/a&gt;, from Bosch and the Eclipse hawkBit project, will cover a topic I think is critical to IoT Security and the general IoT industry: How to do large-scale software updates for IoT devices. If you can’t update a device, it is not going to be secure. Eclipse hawkBit is technology developed internally in Bosch but now open source at Eclipse hawkBit.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://thingmonk.com/eclipse-day-talks.html#vrmvrm&quot;&gt;Julien Vermillard&lt;/a&gt;, from Sierra Wireless and Eclipse Leshan project, is going to talk about his experience deploying large scale M2M and IoT solutions. Julien has been in the industry before it was called IoT so he brings lots of experience to the event.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://thingmonk.com/eclipse-day-talks.html#tobidi&quot;&gt;Tobiasz Dworak&lt;/a&gt;, from GlobalLogic will share his experience using Eclipse IoT technology to build water management systems. It is great to have hands-on practitioners sharing their experiences.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://thingmonk.com/eclipse-day-talks.html#finistseb&quot;&gt;Sebastien Lembour&lt;/a&gt; was the winner of our Open IoT Challenge. His &lt;a href=&quot;https://medium.com/inmoodforlife&quot;&gt;InTheModeforLife &lt;/a&gt;is a truly inspirational story of using open source technology to manage mood disorders. Sebastien is really using IoT to work on ‘things that matter’. It is a great story.&lt;/p&gt;
&lt;p&gt;Finally, I will be talking about open source and industrial IoT. Smart Manufacturing and Industry 4.0 are huge opportunities for IoT but they have specific requirements. I will talking about how Eclipse IoT technology can be used in industrial IoT setting.&lt;/p&gt;
&lt;p&gt;A big thank you to Red Hat for helping to sponsor the Eclipse IoT Day. Red Hat continues to be a key contributor to the community. They definitely get the importance of open source for the overall IoT industry.&lt;/p&gt;
&lt;p&gt;I hope you will consider attending the Eclipse IoT Day and Thingmonk. It will definitely be worth a trip to London.&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/ianskerrett.wordpress.com/4183/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/ianskerrett.wordpress.com/4183/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=ianskerrett.wordpress.com&amp;amp;blog=405862&amp;amp;post=4183&amp;amp;subd=ianskerrett&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/IanSkerrett/~4/41A5UdYGYl0&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 08 Aug 2017 19:10:48 +0000</pubDate>
</item>
<item>
	<title>Chris Aniszczyk: Become a Founding Kubernetes Certified Service Provider</title>
	<guid isPermaLink="false">http://aniszczyk.org/?p=4126</guid>
	<link>http://aniszczyk.org/2017/08/07/become-a-founding-kubernetes-certified-service-provider/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In early September, &lt;a href=&quot;https://cncf.io&quot;&gt;CNCF&lt;/a&gt; will be announcing the founding class of Kubernetes Certified Service Providers (KCSPs). If your company provides professional services to support Kubernetes deployments, please consider signing up to become part of the founding class.&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The main benefits of becoming a KCSP are:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Placement in a new section at the top of https://kubernetes.io/partners/&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Monthly meetings with cloud native project leaders, TOC members,&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;and representatives from the CNCF Governing Board&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Access to leads from end users looking for support&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Requirements are:&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Three or more engineers who pass the Certified Kubernetes Administrator &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;(CKA) exam&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Demonstrable activity in the Kubernetes community including active &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contribution&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;A business model to support enterprise end users, including putting &lt;span&gt;engineers at a customer site&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The CKA exam is about to enter early release beta testing prior to the public release in September. It is an online, proctored, performance-based test that requires solving multiple issues from a command line. It takes 3 to 4 hours to complete, and costs $300, though a discount is available for beta testers to $100.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If your company is interested in becoming a KCSP, please do the following 4 things:&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Ensure that your company is listed at&lt;/span&gt;&lt;a href=&quot;https://kubernetes.io/partners/&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;https://kubernetes.io/partners/&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;and if not (or if the listing should be updated), please do so via the link&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;at the top of that page.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Have 3 or more of your Kubernetes experts sign up for the beta test at:&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSd9-6nL5L3SzWIddCSPoKeuX_Pdq_KHI8C4mQzcUryP-gu0dQ/viewform&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;https://docs.google.com/forms/d/e/1FAIpQLSd9-6nL5L3SzWIddCSPoKeuX_Pdq_KHI8C4mQzcUryP-gu0dQ/viewform&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.Please have them use their company email so we can properly associate&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;br /&gt;
&lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;them. Within a week, we will send beta test dates, a discount coupon code, &lt;/span&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;and instructions to register and schedule.&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Register your interest in becoming a KCSP at this form: &lt;a href=&quot;https://docs.google.com/forms/d/e/1FAIpQLSfai-zlNuvP-q0fz3jw89v3v4m_wYaF7tOBmNY0WoKsZgeQUQ/viewform&quot;&gt;https://docs.google.com/forms/d/e/1FAIpQLSfai-zlNuvP-q0fz3jw89v3v4m_wYaF7tOBmNY0WoKsZgeQUQ/viewform&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;&lt;span&gt;If you are not already on it, and want to track progress of the &lt;/span&gt;certification program over time, please subscribe to the Kubernetes Certification Working Group list: &lt;span&gt;&lt;a href=&quot;https://lists.cncf.io/mailman/listinfo/cncf-kubernetescertwg.&quot;&gt;https://lists.cncf.io/mailman/listinfo/cncf-kubernetescertwg.&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Questions or issues? Please email&lt;/span&gt;&lt;a href=&quot;https://lists.cncf.io/mailman/listinfo/cncf-toc&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;cncf-kcsp-support at lists.cncf.io&lt;/span&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Thanks!&lt;/p&gt;</description>
	<pubDate>Mon, 07 Aug 2017 15:40:02 +0000</pubDate>
</item>
<item>
	<title>Tom Schindl: e(fx)clipse 3.0.0 is released</title>
	<guid isPermaLink="false">http://tomsondev.bestsolution.at/?p=5040</guid>
	<link>https://tomsondev.bestsolution.at/2017/08/06/efxclipse-3-0-0-is-released/</link>
	<description>&lt;p&gt;e(fx)clipse has been released on June 6th but because of the high load of JavaFX projects we are working on I did not have time to write the public release announcement.&lt;/p&gt;
&lt;p&gt;In total we have worked on ~100 tickets most of them adding new features. We also moved our dev infrastructure to github.com and while doing that we’ve split the project into 2 repositories:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/efxclipse-rt&quot;&gt;efxclipse-rt&lt;/a&gt;: Contains the runtime library&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/eclipse/efxclipse-eclipse&quot;&gt;efxclipse-eclipse&lt;/a&gt;: Contains the Eclipse Tooling&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We believe that moving to github and the upcoming pure &lt;a href=&quot;https://tomsondev.bestsolution.at/2017/03/05/e4-on-javafx-with-the-bnd-maven-plugin-with-vs-code/&quot;&gt;maven-build-story&lt;/a&gt; we currently work on in an &lt;a href=&quot;https://github.com/eclipse/efxclipse-rt/tree/44-Transform_project_to_a_pure_maven_build&quot;&gt;extra branch&lt;/a&gt; will make it easier for others to consume our libraries in none OSGi/Eclipse/e4-Projects.&lt;/p&gt;
&lt;p&gt;While we are switching our project structure to pure maven you can already consume our libraries from a maven-repository we host ourselves (see &lt;a href=&quot;http://maven.bestsolution.at/&quot; rel=&quot;nofollow&quot;&gt;http://maven.bestsolution.at/&lt;/a&gt;)&lt;/p&gt;
&lt;p&gt;Let’s take a short tour through some of the 3.0 highlights.&lt;/p&gt;
&lt;h2&gt;Support for Java 9&lt;/h2&gt;
&lt;p&gt;3.0 is the first release who is fully compatible with Java9 and JPMS. Historically we used non-public APIs and even used reflection to eg “hack” DnD in TabFolder. All code that would be broken in Java9 has been reworked to run on Java8 and Java9. &lt;/p&gt;
&lt;p&gt;Some of the none public APIs we used in Java8 have been promoted to public API in Java9 and to support both Java 8 and 9 in the same codebase we extracted those into utility class &lt;code&gt;org.eclipse.fx.ui.controls.JavaFXCompatUtil&lt;/code&gt;:&lt;/p&gt;
&lt;table&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;th&gt;Java 8&lt;/th&gt;
&lt;th&gt;Java 9&lt;/th&gt;
&lt;th&gt;JavaFXCompatUtil&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Window#impl_getWindows()&lt;/td&gt;
&lt;td&gt;Window#getWindows()&lt;/td&gt;
&lt;td&gt;getAllWindows()&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KeyCode#impl_getChar()&lt;/td&gt;
&lt;td&gt;KeyCode#getChar()&lt;/td&gt;
&lt;td&gt;getChar(KeyCode)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;KeyCode#impl_getCode()&lt;/td&gt;
&lt;td&gt;KeyCode#getCode()&lt;/td&gt;
&lt;td&gt;getCode(KeyCode)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;h2&gt;Utilities to work with JavaFX Properties&lt;/h2&gt;
&lt;h3&gt;FXBindings&lt;/h3&gt;
&lt;p&gt;JavaFX has a &lt;code&gt;Bindings&lt;/code&gt; class to setup bindings between different &lt;code&gt;Observable&lt;/code&gt;s but we missed some features we frequently need in our application code hence we added an &lt;code&gt;org.eclipse.fx.core.bindings.FXBindings&lt;/code&gt; who eg has:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;tenaryBinding(ObservableBooleanValue, ObservableValue&amp;lt;T&amp;gt;, ObservableValue&amp;lt;T&amp;gt;) : Binding&amp;lt;T&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt; allowing you to defined if-else in a JavaFX binding way&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;concat(ObservableList&amp;lt;? extends A&amp;gt;...) : ListBinding&amp;lt;A&amp;gt;&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt; to concat the lists to one and keep the target updated when one of the source lists change&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;concat(String, ObservableValue&amp;lt;T&amp;gt;...) : StringBinding&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt; concat the lists and concat the items with the given delimiter and keep the binding updated&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;&lt;code&gt;bindContent(List&amp;lt;T&amp;gt;, ObservableList&amp;lt;E&amp;gt;, Function&amp;lt;E, T&amp;gt;) : Subscription&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt; similar to Bindings.bindContent but allows to use a converter function&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;A very special feature is a &lt;code&gt;BindingStream&lt;/code&gt; you can create with &lt;code&gt;bindStream(ObservableValue&amp;lt;T&amp;gt;)&lt;/code&gt; who is similar to &lt;code&gt;Bindings.select&lt;/code&gt; but is:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Typesafe&lt;/li&gt;
&lt;li&gt;Provide a Property as the leaf&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Let’s look at a concrete example.&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;class Person {
  public ObjectProperty&amp;lt;Address&amp;gt; address();
}

class Address {
  public StringProperty street() { /* ... */ }
}

class UI {

  ObjectProperty&amp;lt;Person&amp;gt; currentPerson = /* ... */;

  TextField street;

  bindUI() {
     street.textProperty().bindBidirectional( 
      FXBindings.bindStream( currentPerson )
        .map( Person::address )
        .collect( 
           FXCollectors.toProperty( Address::street ) 
        )
     );
  }

}
&lt;/pre&gt;
&lt;h2&gt;@ContextValue improvements&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;@ContextValue&lt;/code&gt; is IMHO one of the coolest concepts we introduced in e(fx)clipse to make reuseable components. In 3.0 we added a &lt;code&gt;scope&lt;/code&gt;-Property who allows you to fix a publishing scope. &lt;/p&gt;
&lt;p&gt;As of 3.0 we support:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;APPLICATION&lt;/code&gt;: Publish the value in the IEclipseContext of the application&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LOCAL&lt;/code&gt;: Publish the value in the local IEclipseContext&lt;/li&gt;
&lt;li&gt;&lt;code&gt;DYNAMIC&lt;/code&gt;: Publish the value using IEclipsContext#modify and the application container is responsible to mark the target context&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;with &lt;code&gt;DYNAMIC&lt;/code&gt; as the default.&lt;/p&gt;
&lt;h2&gt;ThreadSynchronize improvements&lt;/h2&gt;
&lt;h3&gt;Halt program flow&lt;/h3&gt;
&lt;p&gt;We added a new API to halt the program flow (NOT the event loop) like this:&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;ThreadSynchronize t = ...;
TextField username = new TextField();

BlockCondition&amp;lt;String&amp;gt; w = new BlockCondition&amp;lt;&amp;gt;();
username.setOnAction( 
  e -&amp;gt; w.release( username.getText() ) );

System.out.println(t.block( w ));
&lt;/pre&gt;
&lt;h3&gt;Headless implementation&lt;/h3&gt;
&lt;p&gt;We at BestSolution use the MVVM-Pattern for our JavaFX applications and there we fetch data from backend-services in none-ui-threads and so we need to synchronize from a Background- to the UI-thread using ThreadSynchronize. &lt;/p&gt;
&lt;p&gt;While things work perfectly fine in the real application because the JavaFX Framework is up and running things fall apart when you test your &lt;strong&gt;V&lt;/strong&gt;iew&lt;strong&gt;M&lt;/strong&gt;odel in a headless JUnit-Tests. For that purpose there’s now the possibility to create a &lt;code&gt;ThreadSynchronize&lt;/code&gt; instance like this:&lt;/p&gt;
&lt;pre class=&quot;brush: java; title: ; notranslate&quot;&gt;ThreadSynchronize t = 
  ThreadSynchronize.createBasicThreadSyncronize(
    new EventLoop()
  );
&lt;/pre&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/tomsondev.wordpress.com/5040/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/tomsondev.wordpress.com/5040/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=tomsondev.bestsolution.at&amp;amp;blog=7995503&amp;amp;post=5040&amp;amp;subd=tomsondev&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Sun, 06 Aug 2017 20:48:03 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Eclipse Projects: Level Playing Field</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5080</guid>
	<link>https://waynebeaton.wordpress.com/2017/08/02/eclipse-projects-level-playing-field/</link>
	<description>&lt;p&gt;For many open source organisations, &lt;em&gt;open&lt;/em&gt; means the same thing as &lt;em&gt;transparent&lt;/em&gt;: open as in &lt;em&gt;open book&lt;/em&gt;. At the Eclipse Foundation, we regard being &lt;em&gt;transparent&lt;/em&gt; as the practice of making sure that the community can see and understand what the project is doing; and being &lt;em&gt;open&lt;/em&gt; as the act of giving up absolute control and welcoming the community to participate as an equal player on a level playing field (i.e. being &lt;em&gt;open&lt;/em&gt; to participation by the others).&lt;/p&gt;
&lt;div class=&quot;wp-caption alignnone&quot; id=&quot;attachment_5137&quot; style=&quot;width: 1101px;&quot;&gt;&lt;img alt=&quot;Screenshot from 2017-07-31 23-22-35&quot; class=&quot;alignnone size-full wp-image-5137&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/07/screenshot-from-2017-07-31-23-22-35.png?w=640&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;Not really a &lt;em&gt;field&lt;/em&gt;, but this is the closest thing that I have to a picture of field-based sporting event. Ice is about as level as you can get.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;At the Eclipse Foundation, we take the &lt;em&gt;open&lt;/em&gt; part of &lt;em&gt;open source&lt;/em&gt; very seriously. It’s codified in the Open Source Rules of Engagement found in the &lt;a href=&quot;https://eclipse.org/projects/dev_process/development_process.php&quot;&gt;Eclipse Development Process&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Everybody needs to play by the same set of rules. A level playing field doesn’t necessarily mean that a project team needs to accept every single contribution that comes their way. Rather, it means that the project team needs to have a set of rules by which &lt;em&gt;everybody&lt;/em&gt; participates; and these rules can’t include things like for whom the contributor works.&lt;/p&gt;
&lt;p&gt;Contribution rules can require that contributions fall within the project’s scope and current release plan. The rules can require that all code contributions be accompanied by unit tests and documentation; or that contributions implement a solution for an issue that’s been discussed by the project team in their issue tracker. Some sort of quality bar is a reasonable part of any set of contribution rules.&lt;/p&gt;
&lt;p&gt;For most open source projects, these contribution rules aren’t formally captured. However, most of the rules that I’ve listed so far collectively form a pretty reasonable default set of participation rules. A quality bar is (obviously) hard to quantify, but for many project teams it’s enough that any committer feels that the contribution should be accepted (some projects require that two committers &lt;em&gt;sign off&lt;/em&gt; on a contribution before it can be accepted).&lt;/p&gt;
&lt;p&gt;Note that it’s also perfectly reasonable for a project team to require that significant contributions come with a promise of continued investment in the form of the contributor becoming a member of the project team.&lt;/p&gt;
&lt;p&gt;Regardless of the rules that define the level playing field for any particular project, any content destined for the project’s code base should have some &lt;em&gt;public record of contribution&lt;/em&gt;. Otherwise, the project would be operating (at least in part) hidden from community involvement and so counter to the open source rules of engagement. That public record can take the form of a Gerrit review, GitHub pull request, or (if you’re in a pinch) an attachment on a Bugzilla or GitHub Issue record.&lt;/p&gt;
&lt;p&gt;Regardless of how a contribution is presented, the contributor must be listed as the author in the &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#resources-commit&quot;&gt;Git commit record&lt;/a&gt; and must complete the &lt;a href=&quot;https://www.eclipse.org/legal/ECA.php&quot;&gt;Eclipse Contributor Agreement&lt;/a&gt; before any contribution can be accepted.&lt;/p&gt;
&lt;p&gt;The best way to get involved with an open source project is connect with the project team. All Eclipse project repositories should have a contribution guide in the root of every Git repository with this contact information and more. You can also search for project information on the &lt;a href=&quot;https://projects.eclipse.org/&quot;&gt;Eclipse Projects website&lt;/a&gt;.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/5080/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/5080/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=5080&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 02 Aug 2017 14:36:10 +0000</pubDate>
</item>
<item>
	<title>Kichwa Coders: GDB’s MI is not a Debug Protocol</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=2664</guid>
	<link>https://kichwacoders.com/2017/08/02/gdbs-mi-is-not-a-debug-protocol/</link>
	<description>&lt;p&gt;While looking to &lt;a href=&quot;https://kichwacoders.com/2017/07/28/what-about-a-common-debug-protocol/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;the future of debugger tooling&lt;/a&gt;, it is still important to consider the prior art and the solutions that have stood the test of time. For embedded development, &lt;a href=&quot;https://www.gnu.org/software/gdb/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;gdb&lt;/a&gt; is high on that list, so it is worth considering if gdb’s interface could be the basis of a debug protocol.&lt;/p&gt;
&lt;p&gt;If you’ve used gdb to debug C/C++ code then you are probably aware of MI, the machine interface layer used to communicate between the debugger backend and the IDE front end. MI is not only used by gdb but also adopted by lldb (the defacto &lt;a href=&quot;https://www.natashatherobot.com/swift-debugging/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;debu&lt;/a&gt;&lt;a href=&quot;https://www.natashatherobot.com/swift-debugging/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;gger for Swift&lt;/a&gt;) and more recently by &lt;a href=&quot;https://github.com/Microsoft/MIEngine/wiki/What-is-CLRDBG&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;clrdbg&lt;/a&gt; (.NET Core). MI defines a rich set of functionality from standard debug run control and breakpoints up to advanced features for multi-process debug, reverse debugging and dynamic printf. With MI being pretty pervasive and supporting such rich functionality, it is tempting to think it might make the basis of a good debug protocol.  However in practice it lacks some of the qualities of a good protocol:&lt;/p&gt;
&lt;h3&gt;1. A Specification&lt;/h3&gt;
&lt;p&gt;We once had the opportunity to work on a project where the brief was to integrate into Eclipse IDE/CDT a custom debugger that ‘implemented the MI spec’. We can tell you we learnt the hard way that MI has plenty of &lt;a href=&quot;https://sourceware.org/gdb/onlinedocs/gdb/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;useful documentation&lt;/a&gt; but no spec to speak of. This matters when you get into the nitty gritty of implementation details for example: what syntax should be used to notify when a bad condition has been created on a breakpoint?&lt;/p&gt;
&lt;p&gt;The documentation does not necessarily reflect what the code does, some command or command variants have inconsistencies with the source code or don’t reflect platform dependent issues. For example, the &lt;a href=&quot;https://sourceware.org/gdb/onlinedocs/gdb/GDB_002fMI-Program-Execution.html#GDB_002fMI-Program-Execution&quot;&gt;-exec-step-instruction&lt;/a&gt; in practice takes an argument (e.g -exec-step-instruction 1)  even though this is not documented.&lt;/p&gt;
&lt;p&gt;The main message here is documentation, even good documentation as in the case of gdb, is not the same as a protocol specification, so one can’t blindly implement to the docs (and if you think it’s just a case of looking at the code… well, which version?- see #4 below).&lt;/p&gt;
&lt;h3&gt;2. Clean Interfaces with no Idiosyncrasies&lt;/h3&gt;
&lt;p&gt;This &lt;a href=&quot;https://github.com/Microsoft/MIEngine/blob/90ef84f438940a0abf1fe6123d5264bb6b75704f/src/MICore/Transports/LocalTransport.cs&quot;&gt;piece of code&lt;/a&gt; from Visual Studio’s MIEngine demonstrates how rife MI is with idiosyncrasies. The code launches a debugger which will use MI to communicate i.e. to gdb, lldb or clrdbg. There are special cases for each tool that an IDE just shouldn’t need to know about:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Different ways of specifying a working directory depending on the tool&lt;/li&gt;
&lt;li&gt;Environment variables are set differently: before launch for gdb/lldb after for clrdbg&lt;/li&gt;
&lt;li&gt;Details of which Operating System the debugger is being run on&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt=&quot;miengine&quot; class=&quot;alignnone size-full wp-image-2746&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/07/miengine.png?w=525&quot; /&gt;&lt;/p&gt;
&lt;p&gt;And this is even before you launch MI. In Eclipse CDT just after launching MI, the IDE has to know about and issue commands about all sorts of things e.g. ‘set print sevenbit-strings on’ c’mon, really, seriously?  Tom &lt;a href=&quot;https://sourceware.org/ml/gdb/2010-08/msg00129.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;sums it up nicely&lt;/a&gt;:&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;“&lt;em&gt;It is an oddity that currently an MI consumer must check gdb’s host charset in order to know how to decode its output.&lt;/em&gt;“&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Once you get into actual debugging there’s a fair amount of ‘need-to-know’ for special cases &amp;amp; exceptions. A protocol needs to steer-clear of implementation details, but in the case of MI these have all too often leaked in.&lt;/p&gt;
&lt;h3&gt;3. Fit for Purpose&lt;/h3&gt;
&lt;p&gt;As MI was not specifically designed to be a protocol,  not suprisingly there are a few behaviour specific things that make it not fit to be a protocol. For example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;If your program prints to stdout, then that can corrupt the output stream of MI, breaking the instructions.&lt;/li&gt;
&lt;li&gt;In some cases GDB responds twice from a single command. In such cases, for example Eclipse CDT has a special &lt;a href=&quot;https://git.eclipse.org/r/#/c/85888/5/dsf-gdb/org.eclipse.cdt.dsf.gdb/src/org/eclipse/cdt/dsf/mi/service/command/MIAsyncErrorProcessor.java,unified&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;MIAsyncErrorProcessor&lt;/a&gt; class just to manage such cases.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;4. Versioning&lt;/h3&gt;
&lt;p&gt;A good protocol has defined versions that clients and subscribers can adapt to.  With each new version of GDB,  MI has subtle differences that make client implementation long-winded and difficult to maintain. For example, in Eclipse CDT’s gdb debugger implementation (DSF) separate classes are created to manage differences in MI in different versions of gdb.  There are 5 different breakpoint classes, 7 different run control classes, etc And this is just gdb versions, let alone lldb or clrdb – imagine trying to implement wide-scale support for all those in a new IDE!&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;debug_versions&quot; class=&quot;alignnone size-full wp-image-2731&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/07/debug_versions.jpg?w=525&quot; /&gt;&lt;/p&gt;
&lt;h2&gt;Conclusion&lt;/h2&gt;
&lt;p&gt;While feature-rich and ubiquitous, gdb’s MI is a reasonable syntax, but not a good debug protocol.  A good protocol needs much more than that – clean interfaces, fit for purpose, a spec &amp;amp; versioning – if it is really going to make common debugger implementations easier.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/2664/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/2664/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=2664&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 02 Aug 2017 09:13:03 +0000</pubDate>
</item>
<item>
	<title>Erdal Karaca: Using Eclipse CDO as a lightweight ORM solution in web applications</title>
	<guid isPermaLink="false">tag:blogger.com,1999:blog-5062989492570016925.post-4649251184595260969</guid>
	<link>http://erdalkaracade.blogspot.com/2017/07/using-eclipse-cdo-as-lightweight-orm.html</link>
	<description>&lt;div dir=&quot;ltr&quot; style=&quot;text-align: left;&quot;&gt;&lt;h2 style=&quot;text-align: left;&quot;&gt;Introduction&lt;/h2&gt;&lt;div&gt;For one of my projects I had to decide for an object relational mapping (ORM) solution to be used in a web environment. There is not much to think about when deciding which framework to use. Yet, I wanted to try out Eclipse CDO [1] as an alternative to, for example, hibernate.&lt;/div&gt;&lt;div&gt;The project is powered by CDO since a year, now. And it has proven to be a lightweight ORM solution. No JPA annotations, just design your EMF model, create instances and let CDO handle the rest...&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;h2 style=&quot;text-align: left;&quot;&gt;A full request/response cycle&lt;/h2&gt;&lt;div&gt;The following sketch shows the involved steps when a user (HTML5 client/browser) sends a HTTP request to a service that consumes the CDO storage.&lt;/div&gt;&lt;table align=&quot;center&quot; cellpadding=&quot;0&quot; cellspacing=&quot;0&quot; class=&quot;tr-caption-container&quot; style=&quot;margin-left: auto; margin-right: auto; text-align: center;&quot;&gt;&lt;tbody&gt;&lt;tr&gt;&lt;td style=&quot;text-align: center;&quot;&gt;&lt;a href=&quot;https://2.bp.blogspot.com/-CMf2OPIHhMw/WX9qrufQ7sI/AAAAAAAAA7w/JjNini5nM2QMveD7tGpkFl9WLelX7najgCLcBGAs/s1600/cdo-orm.png&quot; style=&quot;margin-left: auto; margin-right: auto;&quot;&gt;&lt;img border=&quot;0&quot; height=&quot;480&quot; src=&quot;https://2.bp.blogspot.com/-CMf2OPIHhMw/WX9qrufQ7sI/AAAAAAAAA7w/JjNini5nM2QMveD7tGpkFl9WLelX7najgCLcBGAs/s640/cdo-orm.png&quot; width=&quot;640&quot; /&gt;&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td class=&quot;tr-caption&quot; style=&quot;text-align: center;&quot;&gt;Request/Response process&lt;/td&gt;&lt;/tr&gt;&lt;/tbody&gt;&lt;/table&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The web application is driven by (JAX-RS) REST services, so any call/request is served by the appropriate REST service. &lt;/div&gt;&lt;div&gt;For each call which requires DB access, a new CDO transaction is opened, the request is processed, the result is converted to JSON and the transaction closed/committed.&lt;/div&gt;&lt;div&gt;Conversion of EMF model instances is done using Eclipse Texo [2] in most scenarios, but special view models are also created using a JSON java library like org.json [3].&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;The overall setup of the CDO server/backend:&lt;/div&gt;&lt;div&gt;&lt;ul style=&quot;text-align: left;&quot;&gt;&lt;li&gt;CDO DBStore with embedded H2 RDBMS&lt;/li&gt;&lt;li&gt;disabled auditing, disabled branching (not needed by project)&lt;/li&gt;&lt;li&gt;one resource per user, central meta data resources (for example, user accounts, roles, permissions management), managed in different resource folders&lt;/li&gt;&lt;ul&gt;&lt;li&gt;simulation of a document oriented database&lt;/li&gt;&lt;li&gt;simplifies authorization a lot&lt;/li&gt;&lt;/ul&gt;&lt;li&gt;nginx proxy for simple HTTPS setup&lt;/li&gt;&lt;li&gt;OSGi environment with embedded Jetty, packaged using a maven/tycho enabled Eclipse RCP product build&lt;/li&gt;&lt;li&gt;a very limited virtual host (for now): 512 MB RAM, single core Xeon CPU, Ubuntu 16.04 server&lt;/li&gt;&lt;/ul&gt;&lt;/div&gt;&lt;div&gt;Have you ever considered using CDO as an ORM solution? Or are you already using it in a web context? What are your experiences?&lt;/div&gt;&lt;div&gt;&lt;br /&gt;&lt;/div&gt;&lt;div&gt;Links&lt;/div&gt;&lt;div&gt;[1] Eclipse CDO: &lt;a href=&quot;https://www.eclipse.org/cdo/&quot;&gt;https://www.eclipse.org/cdo/&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[2] Eclipse Texo: &lt;a href=&quot;https://wiki.eclipse.org/Texo&quot;&gt;https://wiki.eclipse.org/Texo&lt;/a&gt;&lt;/div&gt;&lt;div&gt;[3] org.json: &lt;a href=&quot;https://github.com/stleary/JSON-java&quot;&gt;https://github.com/stleary/JSON-java&lt;/a&gt;&lt;/div&gt;&lt;/div&gt;</description>
	<pubDate>Mon, 31 Jul 2017 18:24:51 +0000</pubDate>
	<author>noreply@blogger.com (Erdal Karaca)</author>
</item>
<item>
	<title>Kichwa Coders: What about a Common Debug Protocol?</title>
	<guid isPermaLink="false">http://kichwacoders.com/?p=2807</guid>
	<link>https://kichwacoders.com/2017/07/28/what-about-a-common-debug-protocol/</link>
	<description>&lt;blockquote&gt;
&lt;p style=&quot;text-align: right;&quot;&gt;&lt;img alt=&quot;moth-1749439_1920&quot; class=&quot;alignnone size-full wp-image-2847&quot; src=&quot;https://kichwacoders.files.wordpress.com/2017/07/moth-1749439_1920.jpg?w=525&quot; /&gt;‘From then on, when anything went wrong with a computer, we said it had bugs in it.’ — Grace Hopper&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;As developers, we all know languages and frameworks are emerging and changing at breakneck speed. And the tools just can’t keep up. On top of that, there’s the move to tools in the cloud, which promise the ultimate in developer convenience. While this will be inevitable, the current tools still have a way to go in terms of functionality offered.&lt;/p&gt;
&lt;p&gt;As a result, momentum is building around solutions that work for multi-language support in multiple environments.  The &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;language server protocol&lt;/a&gt; (LSP) has emerged as the chosen way for various IDEs and editors to keep pace with all the different language changes. For new cloud IDEs like Eclipse Che, it is a vital part of the roadmap, providing an effective way to deal with the sheer scale of the problem. The LSP solves this problem by having a server for each language, with a common protocol that all front ends can use to communicate with it. One of the key ideas of the LSP is that the IDE knows as little as it can, delegating down to the language server to do the specifics.&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;
&lt;p&gt;Even for established IDEs such as Eclipse, LSP has a lot to offer. When Eclipse came on the scene more than 15 years ago it was a massive step forward when it came to sharing common UI parts between multiple languages. But that framework is far too cumbersome for today’s rate of change. The LSP takes things to the next level and makes the split between UI and backend even more absolute. Lots of progress has been made on the &lt;a href=&quot;https://projects.eclipse.org/projects/technology.lsp4e&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;LSP4E&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://projects.eclipse.org/projects/technology.lsp4j&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;LSP4J&lt;/a&gt; projects.&lt;/p&gt;
&lt;p&gt;LSP is not just for Eclipse projects. Originating from Microsoft, it also forms the basis for language support in VS Code. Just last month there were 27 &lt;a href=&quot;https://github.com/Microsoft/language-server-protocol/wiki/Protocol-Implementations&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;protocol implementations&lt;/a&gt;, today there are 35 and counting. Truly impressive growth.&lt;/p&gt;
&lt;p&gt;With language support taken care of, it’s time to ask the question about debugging. Again, when Eclipse first emerged it offered a state-of-the-art debugger framework. A common debug interface that separated UI and backend and allowed for implementations in multiple languages: Java, C/C++, Python, etc. But with little investment in recent years it is difficult to see this as being up to the job of being a general framework for the next generation of tools.&lt;/p&gt;
&lt;p&gt;Similarly to LSP, Microsoft provides a  &lt;a href=&quot;https://code.visualstudio.com/docs/extensions/example-debuggers&quot;&gt;Debug Protocol&lt;/a&gt; with a number of adapters written, many already being used in VS Code.  So far there has not yet been a rush to adopt it in the same way as LSP, but is this the next logical step for tool developers? Especially for nascent platforms such as Eclipse Che, where the debug support is at minimal viable demo levels, and will likely rise up the &lt;a href=&quot;https://github.com/eclipse/che/wiki/Roadmap&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;priority list&lt;/a&gt; soon.&lt;/p&gt;
&lt;p&gt;Yet the whole area of debugging is pretty substantial. In order to provide rich debug features, tools need to look at supporting a whole range of functionality, for example:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Launching&lt;/li&gt;
&lt;li&gt;Processes, threads, etc&lt;/li&gt;
&lt;li&gt;Stack Traces&lt;/li&gt;
&lt;li&gt;Run Control (step, continue, run to, etc)&lt;/li&gt;
&lt;li&gt;Breakpoints, watchpoints&lt;/li&gt;
&lt;li&gt;Variables&lt;/li&gt;
&lt;li&gt;Source Code Lookup&lt;/li&gt;
&lt;li&gt;I/O, Console support&lt;/li&gt;
&lt;li&gt;Expressions, etc&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;So all of those features. For every language we use please. In every IDE we might want to use, thanks. Oh, and don’t forget to make it all work asynchronously.&lt;/p&gt;
&lt;p&gt;But hey, do developers still even use richly-featured debuggers? Is it even feasible to have a single protocol or framework cover these for a wide range of languages? The answers to all these may not be so clear at the moment. However as likely as there are &lt;a href=&quot;https://leankit.com/blog/2015/12/how-many-bugs-are-left-the-software-qa-puzzle/&quot;&gt;still bugs&lt;/a&gt; to be found in software, we will still need good quality debuggers and a solution to make them quickly available for multiple languages in multiple tools.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/kichwacoders.wordpress.com/2807/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/kichwacoders.wordpress.com/2807/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=kichwacoders.com&amp;amp;blog=68353182&amp;amp;post=2807&amp;amp;subd=kichwacoders&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 28 Jul 2017 10:26:47 +0000</pubDate>
</item>
<item>
	<title>Doug Schaefer: Taking the Long Way ‘Round</title>
	<guid isPermaLink="false">https://cdtdoug.ca/?p=855</guid>
	<link>https://cdtdoug.ca/2017/07/27/taking-the-long-way-round/</link>
	<description>&lt;p&gt;Remember &lt;a href=&quot;https://cdtdoug.ca/2017/02/16/what-is-two-much-more-than-yet-another-eclipse-ide/&quot;&gt;Eclipse Two&lt;/a&gt;? Yeah, that was a lot of fun. Not sure anyone cares what happened to it. It made quite a splash back at the beginning of the year which proved to me that there is interest in a new tools platform for the desktop. Well, it’s been an interesting journey since then and I thought I’d give you an update.&lt;/p&gt;
&lt;p&gt;First, I do firmly believe that Electron as a combination of Chromium for UI and node.js at the core will be a great tooling platform for the future, if not sooner than that. You look back when Eclipse started, and I think Mike mentioned this in a recent article, Java was the cool new kid on the block. Everyone wanted to learn it and use it and with SWT, it finally became performant and good looking enough to build the next great IDE platform that we have today.&lt;/p&gt;
&lt;p&gt;You look around today, and ask that same question. What is the cool kid on the block that everyone wants to learn and work with? Well, I think it’s obviously HTML5. There’s no doubt there’s lots of hype to it. And with hardware accelerated rendering in Chromium and the native look and feel you can get with Electron, I think it’s ready to be the next next gen.&lt;/p&gt;
&lt;p&gt;But a funny thing happened along the way. We released our latest QNX Software Development Platform with the culmination of all the work we’ve done the last few years with our Eclipse-based IDE Momentics. And our customers like it. They like it a lot. CDT is still the best C/C++ IDE in the industry and the user experience improvements we and the rest of the Eclipse community have delivered is paying off for us and them.&lt;/p&gt;
&lt;p&gt;As much as I’m interested in seeing the next generation IDE platform, it has to be as good or better than what we have today. And personally, I think we’re a long way from that. Knowing how much work that has gone into the CDT to have it’s great static analysis engine and it’s clean debugger integrations and the clean up of launch workflows that we’ve achieved with the Launch Bar, you would need a very strong community to duplicate that. And you would need community leadership to bring all the different interested parties together to work towards a common goal. I struggle to see how that comes together and I look forward to discussing with fellow CDT’ers at EclipseCon Europe to understand where their visions lead.&lt;/p&gt;
&lt;p&gt;For now, along with working on improvements to Momentics and CDT, I am continuing to work with Electron on some other tooling ideas. I think we have something cool in the works for system tracing, an area that a lot of us embedded systems vendors have struggled with in Eclipse and SWT. A lot of custom code has been written to make our System Profiler and Eclipse’s Trace Compass look good and navigate well. That could be an area where we could grow a community.&lt;/p&gt;
&lt;p&gt;It will take us a long time before we know where to go next and I’m convinced that’s a good thing. If anything my work on Electron-based tooling has taught me is that we have a lot to learn with these new technologies. They are so new and constantly changing. It’s tough to build an IDE platform for the next twenty years when JavaScript frameworks come and go every couple. But the good news is that we have time. Eclipse is still going strong and giving our customers the great user experiences and the productivity improvements we promised them. We can afford to be choosy on the next one that will give them the same.&lt;/p&gt;</description>
	<pubDate>Thu, 27 Jul 2017 18:42:05 +0000</pubDate>
</item>
<item>
	<title>Christian Damus: Mixed-Mode Compare/Merge, Part I</title>
	<guid isPermaLink="false">51e06026e4b0732384e5134c:51e06fcee4b071d0afcc6a28:5979073529687ff7ed6dd09f</guid>
	<link>https://damus.ca/blog/2017/7/26/mixed-mode-comparemerge-part-i</link>
	<description>&lt;p&gt;As not all models that &lt;a href=&quot;http://www.eclipse.org/emf/compare/&quot;&gt;EMF Compare&lt;/a&gt; operates on will be described in terms of a façade, it is equally to be expected that some models will only partially comprise domain-specific content that can be described by a façade.  So, models will often present a mix of content in various languages, some of which have façades and some which don't:  imagine a UML design model that mixes &quot;pure UML&quot; content that describes the structure and behaviour of a system in very abstract terms, linked to refinements of various components in their own DSLs.&lt;/p&gt;

&lt;p&gt;The video above demonstrates the first step towards support for mixed-mode comparison and merge, in which a model merge is performed in UML terms for abstract design content and a domain-specific façade for more lower-level design content pertaining to a particular technology.  As &lt;a href=&quot;https://damus.ca/blog/2017/7/25/welcome-to-compare-land&quot;&gt;before&lt;/a&gt;, check out the prototype on &lt;a href=&quot;https://github.com/cdamus/emf.compare/tree/uml-facade&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;hr /&gt;&lt;h2&gt;Update&lt;/h2&gt;&lt;p dir=&quot;ltr&quot;&gt;&lt;em&gt;Updated 10.25, 27 July 2017&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In the first demonstration video, a problem cropped up in which pseudo-conflicts were detected on erroneous matching of new elements added on the left and the right sides.  The consequence was that a correct and complete merge would not be possible.  The brief update video, above, shows how this problem can be resolved in the façade model simply by providing unique identifiers for every object to help the matching process.&lt;/p&gt;</description>
	<pubDate>Wed, 26 Jul 2017 22:13:17 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Forms 1.13.0 Feature: Export to JSON Forms</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=35071</guid>
	<link>https://eclipsesource.com/blogs/2017/07/26/emf-forms-1-13-0-feature-export-to-json-forms/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;With Oxygen, we released EMF Forms 1.13.0.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please note, that we published an update 1.13.1 fixing a critical bug (see &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=519415&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;BR519415&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; and &lt;/span&gt;&lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=518503&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;BR518503&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;) in the &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/tutorials/emf-forms-editors/#ecoreeditor&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Forms Ecore editor&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. So in case you are using this editor, please make sure to get the latest version 1.13.1 from our &lt;/span&gt;&lt;a href=&quot;https://www.eclipse.org/ecp/emfforms/download.html&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;download page&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.eclipse.org/ecp/emfforms/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;EMF Forms&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; makes it simple to create forms which edit your data based on an EMF model. To get started with EMF Forms please refer to &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/tutorials/getting-started-with-EMF-Forms/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;our tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. In this post, we want to outline a new feature in the 1.13.0 release: The export capability to JSON Forms.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you follow our blog, you might have noticed, that we are working on a new renderer for EMF Forms called JSON Forms. JSON Forms is based on a pure web stack and applies the same concepts as EMF Forms. Please see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this blog series&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details about JSON Forms.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As JSON Forms leaves the pure Java world, we need alternatives for EMF. This affects the data model as well as the view model. As the name implies, JSON Forms uses JSON Schema/JSON for both artefacts. In JSON Forms we call these artefacts “Data Schema” (former data model) and “UI Schema” (former view model).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The good news is that we provide a converter, so if you have existing EMF data models or view models, you can simply transfer them to JSON so that you can easily use JSON Forms. Since Oxygen and EMF Forms 1.13.0, this converter is part of every Eclipse Modeling tools edition.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Let’s assume you have a data model and a corresponding view model. The following two screenshots show these two artefacts of a simple example entity “User” with two attributes:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Data Model:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-35072&quot; height=&quot;68&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/image5-1.png&quot; width=&quot;190&quot; /&gt;&lt;/p&gt;
&lt;p&gt;View Model:&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-35073&quot; height=&quot;96&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/image16.png&quot; width=&quot;214&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To convert this to JSON Forms, just right click the view model and select “EMF Forms” =&amp;gt; “Export to JSON Forms”. This will open a wizard allowing you to convert both artefacts into JSON. Please see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/tutorials/emf-forms-and-json-forms-integration-guide/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this integration guide&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The transformation is pretty straight forward. The data model will be converted to a JSON Schema. As you can see in the following listing, it converts information such as the type or the literals of an enum:&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;{
  &quot;type&quot;: &quot;object&quot;,
  &quot;properties&quot;: {
    &quot;firstName&quot;: {
      &quot;type&quot;: &quot;string&quot;
    },
    &quot;gender&quot;: {
      &quot;type&quot;: &quot;string&quot;,
      &quot;enum&quot;: [
        &quot;Male&quot;,
        &quot;Female&quot;
      ]
    }
}
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The view model will be converted into a JSON, which describes the UI. Again it keeps the information of the view model, e.g. the hierarchy using a “Group”. As you can see in the following listing, it also references the data model to describe which attributes shall be shown in the form-based UI. Therefore, JSON Forms works conceptually exactly the same way the EMF Forms works:&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;{
  &quot;type&quot;: &quot;VerticalLayout&quot;,
  &quot;elements&quot;: [
      {
        &quot;type&quot;: &quot;Group&quot;,
        &quot;label&quot;: &quot;MyGroup&quot;,
        &quot;elements&quot;: [
          {
            &quot;type&quot;: &quot;Control&quot;,
            &quot;label&quot;: &quot;First Name&quot;,
            &quot;scope&quot;: {
              &quot;$ref&quot;: &quot;#/properties/firstName&quot;
            }
          },
          {
            &quot;type&quot;: &quot;Control&quot;,
            &quot;label&quot;: &quot;Gender&quot;,
            &quot;scope&quot;: {
             &quot;$ref&quot;: &quot;#/properties/gender&quot;
            }
          }
          ]
         
        }
    ]
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Just by exporting these two artefacts, which is basically one click, you can use JSON Forms to render the form like EMF Forms, but as a native web application. No further coding is required for this. The example form would look like this:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone size-full wp-image-35074&quot; height=&quot;244&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/image13-1.png&quot; width=&quot;289&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are using EMF Forms and are interested in trying out the new renderer, please refer to &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/tutorials/emf-forms-and-json-forms-integration-guide/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this tutorial&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. If you want to learn more about JSON Forms in general, we recommend &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2016/12/21/json-forms-make-it-happen-blog-series-pilot/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;this blog series&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;</description>
	<pubDate>Wed, 26 Jul 2017 13:42:54 +0000</pubDate>
</item>
<item>
	<title>Christian Damus: Welcome to Compare-Land</title>
	<guid isPermaLink="false">51e06026e4b0732384e5134c:51e06fcee4b071d0afcc6a28:5977ab7be45a7c0d24a6f263</guid>
	<link>https://damus.ca/blog/2017/7/25/welcome-to-compare-land</link>
	<description>&lt;p&gt;Yes, it has been a while since I last blogged, and that was before a long run of work on the &lt;a href=&quot;http://www.eclipse.org/papyrus-rt/&quot;&gt;Papyrus-RT project&lt;/a&gt; which just this month reached the all-important &lt;a href=&quot;https://papyrusuml.wordpress.com/2017/07/21/papyrus-for-real-time-is-born/&quot;&gt;1.0 release&lt;/a&gt;.  Now I have changed tack slightly, still working on Eclipse open-source projects, but with a focus on the &lt;a href=&quot;https://www.eclipse.org/emf/compare/&quot;&gt;EMF Compare&lt;/a&gt;.  At least, for now.&lt;/p&gt;
&lt;p&gt;I am diving head-first into this project with some prototyping/experimentation in the use of &lt;em&gt;Façade Models&lt;/em&gt; for customization and stream-lining of the user experience of compare/merge in complex modeling languages such as UML, especially when profiled for DSMLs (domain-specific modeling languages).&lt;/p&gt;

&lt;p&gt;The embedded video is a demonstration, longer than is usual for these videos of mine, of the first prototype of pluggable &lt;em&gt;Façade Providers&lt;/em&gt; in the &lt;strong&gt;EMF Compare&lt;/strong&gt; framework.  The framework consults the available façade providers to obtain instances of a façade model representing the input models to be compared.  The idea is that the façade can more concisely and, in some ways, usefully encode the semantics of the domain-specific language that are significant to the efficient and correct comparison and merging of those models.  Indeed, even the very simple example presented in the video shows how domain-specific constraints are easily represented in the façade that enable detection of merge conflicts that are much more cumbersome to implement &quot;by hand&quot; in the EMF Compare framework.&lt;/p&gt;
&lt;p&gt;Basically, what happens is that instead of comparing the underlying model content (in this case, profiled UML), the system compares the façades and presents that comparison to the user in its terms.  And changes performed by the user on the merge result are propagated by the façade to the underlying model, to be written out when the user saves the merge result.&lt;/p&gt;
&lt;p&gt;Check out the video above and get the code in my &lt;a href=&quot;https://github.com/cdamus/emf.compare/&quot;&gt;GitHub fork&lt;/a&gt; of the EMF Compare project, on the &lt;a href=&quot;https://github.com/cdamus/emf.compare/tree/uml-facade&quot;&gt;uml-compare branch&lt;/a&gt;.  Look particularly at the new plug-in and test projects:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;oeec.facade&lt;/code&gt; — some core façade framework bits&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oeec.facade.ui&lt;/code&gt; — the user interface for façade provider preferences&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oeec.uml2.facade&lt;/code&gt; — extensions to support façades for UML profiles&lt;/li&gt;
&lt;li&gt;&lt;code&gt;oeec.uml2.facade.tests&lt;/code&gt; — some JUnit tests for basic façade mechanics and simple façade-based compare/merge scenarios&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Where, of course, &lt;code&gt;oeec&lt;/code&gt; is just a compact substitute for the &lt;code&gt;org.eclipse.emf.compare&lt;/code&gt; namespace.&lt;/p&gt;</description>
	<pubDate>Tue, 25 Jul 2017 21:08:15 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: Follow @EclipseJavaIDE</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=5039</guid>
	<link>https://waynebeaton.wordpress.com/2017/07/25/follow-eclipsejavaide/</link>
	<description>&lt;p&gt;If you’re new to the Eclipse IDE you’re already a big fan, you’ll find something of value every day by following &lt;a href=&quot;https://twitter.com/EclipseJavaIDE&quot;&gt;@EclipseJavaIDE&lt;/a&gt;.  Frankly, there’s so much good stuff coming out of this account, that it’s hard to pick any favourites. So, I’ve pulled out a couple of recent ones.&lt;/p&gt;
&lt;p&gt;Menu entries exist to help you complete incomplete thoughts and—of course—&lt;code&gt;CTRL+1&lt;/code&gt; is always there for &lt;em&gt;Quick Fix&lt;/em&gt; or &lt;em&gt;Quick Assist&lt;/em&gt;; but sometimes you just don’t want to take your hands off the keyboard.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Create variables or fields out of an expression with Ctrl+2, L and Ctrl+2, F respectively. Type is inferred for you! &lt;a href=&quot;https://twitter.com/hashtag/EclipseTips?src=hash&quot;&gt;#EclipseTips&lt;/a&gt; &lt;a href=&quot;https://t.co/wZ7HgGzihm&quot;&gt;pic.twitter.com/wZ7HgGzihm&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Eclipse Java IDE (@EclipseJavaIDE) &lt;a href=&quot;https://twitter.com/EclipseJavaIDE/status/889797929896226817&quot;&gt;July 25, 2017&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Automating tedious operations like generating fields, getters and setters, etc. is something that the Eclipse IDE does well. Converting anonymous classes into &lt;em&gt;lambda expressions&lt;/em&gt;? Easy.&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot;&gt;
&lt;p dir=&quot;ltr&quot; lang=&quot;en&quot;&gt;Let &lt;a href=&quot;https://twitter.com/EclipseJavaIDE&quot;&gt;@EclipseJavaIDE&lt;/a&gt; take care of converting your anonymous classes to lambda expressions. Quite tedious to do manually! &lt;a href=&quot;https://twitter.com/hashtag/EclipseTips?src=hash&quot;&gt;#EclipseTips&lt;/a&gt; &lt;a href=&quot;https://t.co/8vvSVZonkb&quot;&gt;pic.twitter.com/8vvSVZonkb&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;— Eclipse Java IDE (@EclipseJavaIDE) &lt;a href=&quot;https://twitter.com/EclipseJavaIDE/status/888051277233438720&quot;&gt;July 20, 2017&lt;/a&gt;&lt;/p&gt;&lt;/blockquote&gt;
&lt;p&gt;Follow @EclipseJavaIDE to get your daily Eclipse IDE tips and tricks.&lt;/p&gt;
&lt;p&gt;Download the &lt;a href=&quot;https://www.eclipse.org/downloads/eclipse-packages/&quot;&gt;Eclipse IDE, Oxygen Edition&lt;/a&gt; today.&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://www.eclipsecon.org/europe2017&quot;&gt;&lt;img alt=&quot;EclipseCon Europe 2017&quot; border=&quot;0&quot; src=&quot;https://www.eclipsecon.org/europe2017/sites/default/files/ece_2017_728%20x%2090.png&quot; /&gt;&lt;/a&gt;&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/5039/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/5039/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=5039&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 25 Jul 2017 14:52:51 +0000</pubDate>
</item>
<item>
	<title>Eclipse Announcements: Eclipse Newsletter - Summer Issue</title>
	<guid isPermaLink="true">http://feedproxy.google.com/~r/eclipse/fnews/~3/2q3fxA6JM54/</guid>
	<link>http://feedproxy.google.com/~r/eclipse/fnews/~3/2q3fxA6JM54/</link>
	<description>The latest Eclipse Newsletter is now available. Read it and learn how to try out Java 9 Support for Eclipse Oxygen!&lt;img alt=&quot;&quot; height=&quot;1&quot; src=&quot;http://feeds.feedburner.com/~r/eclipse/fnews/~4/2q3fxA6JM54&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Tue, 25 Jul 2017 14:05:00 +0000</pubDate>
</item>
<item>
	<title>Ctrlflow: Shape Code Recommenders’ Roadmap for 2018!</title>
	<guid isPermaLink="false">https://blog.ctrlflow.com/?p=228</guid>
	<link>https://blog.ctrlflow.com/shape-code-recommenders-roadmap-2018/</link>
	<description>&lt;p&gt;Oxygen has been released a few weeks ago. After taking a short summer break, we are starting to think about future directions for Eclipse Code Recommenders. There are a couple of ideas we’ve mulled over for months already. For this post, I selected two of them because (i) I am very excited about both and (ii) I can’t decide which one to go for first. Thus, I think it’s time to learn what you think about them and help us prioritize… 🙂 Idea #1: Building an AI-powered bug detection The first idea is pretty easy to explain: Bug detection tools like FindBugs offer rule sets for […]&lt;/p&gt;
&lt;p&gt;The post &lt;a href=&quot;https://blog.ctrlflow.com/shape-code-recommenders-roadmap-2018/&quot; rel=&quot;nofollow&quot;&gt;Shape Code Recommenders’ Roadmap for 2018!&lt;/a&gt; appeared first on &lt;a href=&quot;https://blog.ctrlflow.com&quot; rel=&quot;nofollow&quot;&gt;Ctrlflow Blog&lt;/a&gt;.&lt;/p&gt;</description>
	<pubDate>Tue, 25 Jul 2017 06:00:50 +0000</pubDate>
</item>
<item>
	<title>PapyrusUML: Papyrus for Real Time is born!</title>
	<guid isPermaLink="false">http://papyrusuml.wordpress.com/?p=759</guid>
	<link>https://papyrusuml.wordpress.com/2017/07/21/papyrus-for-real-time-is-born/</link>
	<description>&lt;p&gt;ME-RT (a.k.a., Papyrus for Real Time, a.k.a., Papyrus-RT) was first presented/announced at &lt;a href=&quot;http://www.eclipsecon.org/europe2014/index.html&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;EclipseCon North America 2014&lt;/a&gt;. In the 1220 days Since then, work my minions have worked tirelessly to finally releasing v1.0 yesterday. Papyrus-RT is now officially out of incubation! This “birth” (Papyrus-RT did break out of the incubation “egg”…) was even announced during the quartery &lt;a href=&quot;https://www.youtube.com/watch?v=3V9jVS9yutY#t=32m06s&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Foundation members meeting&lt;/a&gt;!&lt;/p&gt;
&lt;p&gt;You can find all the nitty-gritty details of this release &lt;a href=&quot;https://wiki.eclipse.org/Papyrus-RT/Releases#Papyrus-RT_MVP2.1_.28v1.0.29_-_Better_behave_with_Oxygen.21&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Congratulations to all my minions from CEA, EclipseSource, Ericsson, Zeligsoft, and all others who have contributed their time, work, and support for all their great contributions in bringing out a new offering in my growing product line!&lt;/p&gt;
&lt;h2 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;&lt;a href=&quot;https://eclipse.org/papyrus-rt/content/download.php&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Click here to download your free software!&lt;/a&gt;&lt;/strong&gt;&lt;/h2&gt;
&lt;h6 style=&quot;text-align: center;&quot;&gt;&lt;strong&gt;Hint: it’s &lt;span style=&quot;text-decoration: underline;&quot;&gt;open source&lt;/span&gt;! The whole tool is, was, and it will continue be free &lt;img alt=&quot;😉&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f609.png&quot; style=&quot;height: 1em;&quot; /&gt;  &lt;/strong&gt;&lt;/h6&gt;&lt;br /&gt;Filed under: &lt;a href=&quot;https://papyrusuml.wordpress.com/category/papyrus-rt/&quot;&gt;Papyrus-RT&lt;/a&gt; Tagged: &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/papyrus-rt-2/&quot;&gt;papyrus-rt&lt;/a&gt;, &lt;a href=&quot;https://papyrusuml.wordpress.com/tag/release/&quot;&gt;release&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godelicious/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/delicious/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gofacebook/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/facebook/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gotwitter/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/twitter/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/gostumble/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/stumble/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/godigg/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/digg/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;a href=&quot;http://feeds.wordpress.com/1.0/goreddit/papyrusuml.wordpress.com/759/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/reddit/papyrusuml.wordpress.com/759/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=papyrusuml.wordpress.com&amp;amp;blog=72365150&amp;amp;post=759&amp;amp;subd=papyrusuml&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 21 Jul 2017 17:11:19 +0000</pubDate>
</item>
<item>
	<title>Maximilian and Jonas: EMF Support for Che – Day 5: Create a plugin and register a file type</title>
	<guid isPermaLink="false">https://eclipsesource.com/?p=35027</guid>
	<link>https://eclipsesource.com/blogs/2017/07/21/emf-support-for-che-day-5/</link>
	<description>&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog series, we share our experiences extending &lt;/span&gt;&lt;a href=&quot;http://eclipse.org/che&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Eclipse Che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; to add EMF support. The &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;first post&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; covered our goals. In previous posts, we describe how to &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;add support for code generation&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, &lt;/span&gt;&lt;a href=&quot;http://eclipsesource.com/blogs/2017/03/01/emf-support-for-che-day-3-adding-a-custom-workspace-stack/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;create a custom stack&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;, and &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;how to build che&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;. It has been quite a while since our last blog, but now we would like to continue with the next step.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Our next major goal is to add a custom editor to Che capable of editing EMF models (Ecore files). To do so, we will first create a custom plugin for Che, so that we do not mix our custom extension code with the core code base of Che. In our first plugin, we will add two extensions to Che: Registering .ecore as a custom file type and registering a custom Editor for this file type. We will describe those first two extensions in detail, as they will provide a good template for later extensions.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Plugins in Che are basically maven modules, that we add to our custom build. Please note that Che does not have a runtime plugin mechanism (see &lt;/span&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;the last post&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt; for more details).&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;We could integrate the module manually into the Che build however that would require some manual work. Fortunately, Eclipse Che provides an easy-to-use solution using maven archtypes to generate a simple plugin which can be used as a basis for your own plugin.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The following description is based on the current version (5.13.0) of Eclipse Che. &lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Please execute the following steps:&lt;/span&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Clone “git clone&lt;/span&gt;&lt;a href=&quot;https://github.com/eclipse/che-archetypes.git&quot;&gt; &lt;span style=&quot;font-weight: 400;&quot;&gt;https://github.com/eclipse/che-archetypes.git&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;“&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Change into cloned directory&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Checkout Tag 5.13 “git checkout tags/5.13.0”&lt;/span&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Execute the following command&lt;/span&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;mvn org.apache.maven.plugins:maven-archetype-plugin:2.4:generate -DarchetypeRepository=http://maven.codenvycorp.com/content/groups/public/ -DarchetypeGroupId=org.eclipse.che.archetype -DarchetypeArtifactId=plugin-menu-archetype -DarchetypeVersion=5.13.0 -DgroupId=my.plugin -DartifactId=my-sample-plugin -Dversion=0.1-SNAPSHOT -DskipITs -DinteractiveMode=false&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;This will generate a sample plugin into the “my-sample-plugin” directory. The sample contains a menu item triggering a “Hello from Che!!!” output. You can browse the plugin directory to learn more about the sample code.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To build the sample plugin with Che switch into “my-sample-plugin” directory and execute: &lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;mvn clean install&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, to run the built Plugin with Che execute the following command in the “my-sample-plugin” directory ($PWD points to the current directory):&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock -v $PWD/mydata:/data -v $PWD/assembly-che/assembly-main/target/eclipse-che-0.1-SNAPSHOT/eclipse-che-0.1-SNAPSHOT:/assembly eclipse/che-cli:5.13.0 start&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now, open your browser at “http://localhost:8080” and create a new workspace. You can see the generated sample menu and action.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-35033 size-large&quot; height=&quot;186&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/image10-1024x186.png&quot; width=&quot;1024&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now that we have a running plugin, lets come back to our original goal- EMF support in Che. We will use the plugin to add some extensions to Che: a custom file type and a custom editor.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Currently, without any extension, Che shows a generic file icon for the “.ecore” extension:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-35036 size-full&quot; height=&quot;268&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/image13.png&quot; width=&quot;608&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;As a next example, we want to register the file extension “.ecore” and display an appropriate icon.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;First we add our icon to the plugin directory “my-sample-plugin/plugins/my-sample-plugin/my-sample-plugin-ide/src/main/resources”.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now, we need to load the icon in GWT. To do so, we create a  new interface “IconResource.java” in the “my.plugin.ide” package with the following content:&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;package my.plugin.ide;

import com.google.gwt.core.client.GWT;
import com.google.gwt.resources.client.ClientBundle;
import org.vectomatic.dom.svg.ui.SVGResource;

public interface IconResource extends ClientBundle {
   IconResource INSTANCE = GWT.create(IconResource.class);

   @Source(&quot;icon.svg&quot;)
   SVGResource icon();
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Since we added a dependency to “org.vectomatic.dom.svg” we need to add this dependency in the “my-sample-plugin-ide/pom.xml” &lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;   org.vectomatic
   lib-gwt-svg
   0.5.12
&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Now, we define our custom file type and add it to the generated Gin module. Open “SampleMenuGinModule.java” and add the following code, which is basically a factory for the custom file type. The file type defines the icon as well as the file extension.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Once this is added, we can have the new file type injected in any other class using dependency injection.&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;@Provides
@Singleton
@Named(&quot;EcoreFileType&quot;)
protected FileType provideEcoreFile(IconResource res) {
   return new FileType(res.icon(), &quot;ecore&quot;);
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Finally, we need to register the file type and register an editor for it. For now, we will just register the default text editor of Che, we will use this code later to register our own custom editor.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;To do the registration, we create a new java class “MyEditorExtension.java”. Those extension classes are the central place of plugins to interact with Che. This allows it to handle all registrations of things like file types and editors, but also actions, views, etc.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;The annotation “@Extension” tells Che, that this class provides extensions. All methods will be executed via dependency injection, allowing you to inject all required parameters and services. In the following example, we inject two Che services, the editor registry and the file type registry, as well as our custom file type. First, we add our custom file type to the file type registry, second, we associate our custom file type with the default text editor.&lt;/span&gt;&lt;/p&gt;
&lt;pre class=&quot;EnlighterJSRAW&quot;&gt;@Extension(title = &quot;Ecore Editor&quot;)
public class MyEditorExtension {
   @Inject
   public void registerForFiletype(final EditorRegistry editorRegistry,
                                   final FileTypeRegistry fileTypeRegistry,
                                   final @Named(&quot;EcoreFileType&quot;) FileType ecoreFile,
                                   final DefaultTextEditorProvider provider
                                   ){
       fileTypeRegistry.registerFileType(ecoreFile);
       editorRegistry.registerDefaultEditor(ecoreFile,provider);
   }
}&lt;/pre&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Once we rebuilt Che, all files using the file extension “.ecore” will use the custom icon and will open the default text editor:&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;&quot; class=&quot;alignnone wp-image-35035 size-full&quot; height=&quot;312&quot; src=&quot;https://eclipsesource.com/wp-content/uploads/2017/07/image5.png&quot; width=&quot;867&quot; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;In this blog post, we have created a plugin for Che that allows us to add customizations without mixing our code with the Che code based. So far, the customizations were simple, we added an icon and registered the existing default editor. However, our original goal was to add a custom editor, which is capable of modifying an Ecore file just the way you are used to in the Eclipse Desktop IDE. There are several possible ways to develop such an editor, which we will discuss this in the next part of this blog series.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;So stay tuned!&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;If you are interested in learning more about the prototype for EMF support, if you want to contribute or sponsor its further development, or if you want support for creating your own extension for Che, please feel free to &lt;/span&gt;&lt;a href=&quot;mailto:munich@eclipsesource.com&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;contact us&lt;/span&gt;&lt;/a&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;.&lt;/span&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;
&lt;p&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;List of all available days to date:&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/02/08/emf-support-for-che-day-0-motivation-and-getting-started/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Day 0&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/02/14/emf-support-for-che-day-1-run-che-and-import-existing-emf-project/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Day 1&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/02/23/emf-support-for-che-day-2-generating-code/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Day 2&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/03/01/emf-support-for-che-day-3-adding-a-custom-workspace-stack/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Day 3&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/03/15/emf-support-for-che-day-4-building-che/&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;Day 4&lt;/span&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li style=&quot;font-weight: 400;&quot;&gt;&lt;span style=&quot;font-weight: 400;&quot;&gt;&lt;a href=&quot;https://eclipsesource.com/blogs/2017/07/21/emf-support-for-che-day-5&quot;&gt;Day 5&lt;/a&gt;&lt;/span&gt;&lt;/li&gt;
&lt;/ul&gt;</description>
	<pubDate>Fri, 21 Jul 2017 08:23:58 +0000</pubDate>
</item>
<item>
	<title>Paolo Patierno: A lot of fun with … AMQP, Spark, Kafka, EnMasse, MQTT, Vert.x &amp; IoT</title>
	<guid isPermaLink="false">http://paolopatierno.wordpress.com/?p=5120</guid>
	<link>https://paolopatierno.wordpress.com/2017/07/21/a-lot-of-fun-with-amqp-spark-kafka-enmasse-mqtt-vert-x-iot/</link>
	<description>&lt;p style=&quot;text-align: justify;&quot;&gt;When I say to someone that I work for Red Hat they say me “Ah ! Are you working on Linux ?” … No, no, no and … no ! I’m not a Linux guy, I’m not a fan boy but I’m just a daily user &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;All people know that Red Hat is THE company which provides the best enterprise Linux distribution well known as Red Hat Enterprise Linux (RHEL) but Red Hat is not only Linux today. Its portfolio is huge : the cloud and containers business with the OpenShift effort, the microservices offer with Vert.x, Wildfly Swarm, Spring Boot, the IoT world with the involvement in the main Eclipse Foundation projects.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The objective of this blog is just showing briefly the projects I worked (or I’m working) on since last year when I was hired on March 1st. They are not “my” projects, they are projects I’m involved because the entire team is working on them … collaboration, you know &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;You could be surprised about that but … there is no Linux ! I’m on the messaging &amp;amp; IoT team, so you will see only projects about this stuff &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;AMQP – Apache Spark connector&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;This “little” component is strictly related to the “big” &lt;a href=&quot;https://radanalytics.io/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;radanalytics.io&lt;/a&gt; project which takes the powerful of &lt;a href=&quot;https://spark.apache.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Apache Spark&lt;/a&gt; for analytics (batch, real-time, machine learning, …) running on &lt;a href=&quot;https://www.openshift.com/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;OpenShift&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Because the messaging team works mainly on projects like &lt;a href=&quot;https://activemq.apache.org/artemis/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;ActiveMQ Artemis&lt;/a&gt; and the &lt;a href=&quot;http://qpid.apache.org/components/dispatch-router/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Qpid Dispatch Router&lt;/a&gt;, where the main protocol is AMQP 1.0, the idea was developing a connector for Spark Streaming in order to ingest data through this protocol so from queues/topics on a broker or through the router in a direct messaging fashion.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;You can find the component &lt;a href=&quot;https://github.com/radanalyticsio/streaming-amqp&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; and even an IoT demo &lt;a href=&quot;https://github.com/ppatierno/enmasse-spark-demo&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt; which shows how it’s possible to ingest data through AMQP 1.0 using the EnMasse project (see below) and then executing a real time streaming analytics with Spark Streaming, all running on Kubernetes and OpenShift.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;AMQP – Apache Kafka bridge&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;https://kafka.apache.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Apache Kafka&lt;/a&gt; is one of the best technologies used today for ingesting data (i.e. IoT related scenarios) with an high throughput. Even in this case, the idea was providing a way for having AMQP 1.0 clients and JMS clients pushing messages to Apache Kafka topics without knowing the related custom protocol.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In this way, if you have such clients because you are already using a broker technology but then you need some specific Kafka features (i.e. re-reading streams), you can just switch the messaging system (from the broker to Kafka) and using the bridge you don’t need to update or modify clients. I showed how this is possible at the Red Hat summit as well and the related demo is available &lt;a href=&quot;https://github.com/ppatierno/amqp-kafka-demo&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;MQTT on EnMasse&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;http://enmasse.io&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;EnMasse&lt;/a&gt; is an open source messaging platform, with focus on scalability and performance. It can run on your own infrastructure (on premise) or in the cloud, and simplifies the deployment of messaging infrastructure.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It’s based on other open source projects like ActiveMQ Artemis and Qpid Dispatch Router supporting the AMQP 1.0 protocol natively.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;In order to provide support for the MQTT protocol, we designed how to take &lt;a href=&quot;https://github.com/EnMasseProject/enmasse/blob/master/documentation/mqtt-over-amqp/README.md&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;“MQTT over AMQP”&lt;/a&gt; so having MQTT features on the AMQP protocol. From the design we moved to develop two main components :&lt;/p&gt;
&lt;ul style=&quot;text-align: justify;&quot;&gt;
&lt;li&gt;the &lt;a href=&quot;https://github.com/EnMasseProject/enmasse/tree/master/mqtt/mqtt-gateway&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;MQTT gateway&lt;/a&gt; which handles connections with remote MQTT clients translating all messages from MQTT to AMQP and vice versa;&lt;/li&gt;
&lt;li&gt;the &lt;a href=&quot;https://github.com/EnMasseProject/enmasse/tree/master/mqtt/mqtt-lwt&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;MQTT LWT&lt;/a&gt; (Last and Will Testament) service which provides a way for notifying all clients connected to EnMasse that another client is suddenly died sending them its “will message”. The great thing about this service, is that it works with pure AMQP 1.0 clients so bringing the LWT feature on AMQP as well : for this reason the team is thinking to change its name just in AMQP LWT service.&lt;/li&gt;
&lt;/ul&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;EnMasse is great for IoT scenarios in order to handle a huge number of connections and ingesting a lot of data using AMQP and MQTT as protocols. I used it in all my IoT demos for showing how it’s possible to integrate it with streaming and analytics frameworks. It’s also the main choice as messaging infrastructure in the cloud for the Eclipse Hono project.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Vert.x and the IoT components&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;http://vertx.io&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Vert.x&lt;/a&gt; is a great toolkit for developing reactive applications running on a JVM.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The reactive applications manifesto fits really well for IoT scenarios where responsiveness, resiliency, elasticity and the communication driven by messages are the pillars of all the IoT solutions.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Starting to work on the MQTT gateway for EnMasse using Vert.x for that, I decided to develop an &lt;a href=&quot;https://github.com/vert-x3/vertx-mqtt-server&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;MQTT server&lt;/a&gt; that was just able to handle communication with remote clients providing an API for interacting with them : this component was used for bridging MQTT to AMQP (in EnMasse) but can be used for any scenario where a sort of protocol translation or integration is needed (i.e. MQTT to Vert.x Event Bus, to Kafka, …). Pay attention, it’s not a full broker !&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The other component was the Apache &lt;a href=&quot;https://github.com/vert-x3/vertx-kafka-client&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Kafka client&lt;/a&gt;, mainly developed by Julien Viet (lead on Vert.x) and then passed to me as maintainer for improving it and adding new features from the first release.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Finally, thanks to the Google Summer of Code, during the last 2 months I have been mentoring a student who is working on developing a Vert.x native &lt;a href=&quot;https://github.com/vert-x3/vertx-mqtt-client&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;MQTT client&lt;/a&gt;.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;As you can see the Vert.x toolkit is really growing from an IoT perspective other then providing a lot of components useful for developing pure microservices based solutions.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Eclipse Hono&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;&lt;a href=&quot;https://www.eclipse.org/hono/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse Hono&lt;/a&gt; is a project under the big &lt;a href=&quot;https://iot.eclipse.org/&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;Eclipse IoT&lt;/a&gt; umbrealla in the Eclipse Foundation. It provides a service interfaces for connecting large numbers of IoT devices to a back end and interacting with them in a uniform way regardless of the device communication protocol.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;It supports scalable and secure ingestion of large volumes of sensor data by means of its Telemetry API. The Command &amp;amp; Control API allows for sending commands (request messages) to devices and receive a reply to such a command from a device asynchronously in a reliable way.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;This project is mainly developed by Red Hat and Bosch and I gave my support on designing all the API other then implementing the MQTT adapter even in this case using the Vert.x MQTT server component.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Because Eclipse Hono works on top of a messaging infrastructure for allowing messages exchange, the main choice was using ActiveMQ Artemis and the Qpid Dispatch Router even running them using Kubernetes and OpenShift with EnMasse.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Apache Kafka&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Finally, I was involved to develop a POC named “&lt;a href=&quot;https://github.com/EnMasseProject/barnabas&quot; rel=&quot;noopener&quot; target=&quot;_blank&quot;&gt;barnabas&lt;/a&gt;” (a messenger character from a Frank Kafka novel :-)) in order to take Apache Kafka running on OpenShift.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Considering the stetaful nature of a project like Kafka, I started when Kubernetes didn’t offer the StatefulSets feature doing something similar by myself. Today, the available deploy is based on StatefulSets and it’s a work in progress on which I’ll continue to work for pushing the POC to the next level.&lt;/p&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;Apache Kafka is a really great project which has its own use cases in the messaging world; today it’s more powerful thanks to the new Streams API which allows to execute a real time streaming analytics using topics from your cluster and running simple applications. My next step is to move my EnMasse + Spark demo to an EnMasse + Kafka (and streaming) deployment. I’m also giving my support on the Apache Kafka code.&lt;/p&gt;
&lt;h2 style=&quot;text-align: justify;&quot;&gt;Conclusion&lt;/h2&gt;
&lt;p style=&quot;text-align: justify;&quot;&gt;The variety and heterogeneity of all the above projects is giving me a lot of fun in my day by day work even collaborating with different people with different knowledge. I like learning new stuff and the great thing is that … things to learn are endless ! &lt;img alt=&quot;🙂&quot; class=&quot;wp-smiley&quot; src=&quot;https://s0.wp.com/wp-content/mu-plugins/wpcom-smileys/twemoji/2/72x72/1f642.png&quot; style=&quot;height: 1em;&quot; /&gt;&lt;/p&gt;
&lt;p&gt; &lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/paolopatierno.wordpress.com/5120/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/paolopatierno.wordpress.com/5120/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=paolopatierno.wordpress.com&amp;amp;blog=15467422&amp;amp;post=5120&amp;amp;subd=paolopatierno&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Fri, 21 Jul 2017 07:31:23 +0000</pubDate>
</item>
<item>
	<title>Wayne Beaton: License Certification (Mostly) Just Happens</title>
	<guid isPermaLink="false">http://waynebeaton.wordpress.com/?p=4911</guid>
	<link>https://waynebeaton.wordpress.com/2017/07/19/license-certification-mostly-just-happens/</link>
	<description>&lt;p&gt;The &lt;a href=&quot;https://eclipse.org/org/documents/Eclipse_IP_Policy.pdf&quot;&gt;Eclipse Intellectual Property Policy&lt;/a&gt; defines two types of intellectual property (IP) due diligence for third party content. The so-called &lt;em&gt;Type A Due Diligence&lt;/em&gt; is concerned exclusively with license certification; and &lt;em&gt;Type B Due Diligence&lt;/em&gt; is concerned with license certification, provenance checking and a deep dive scan of the content for various anomalies.&lt;/p&gt;
&lt;p&gt;Regarding the analysis of &lt;em&gt;Type A&lt;/em&gt; third party content, the IP Policy makes this statement:&lt;/p&gt;
&lt;p style=&quot;padding-left: 30px;&quot;&gt;&lt;em&gt;It will be the responsibility of the Eclipse Project to run and analyze the results of a scan tool provided by the EMO, using parameters provided by the EMO, to obtain the terms and conditions under which such Content would be distributed by the Eclipse Foundation, and ensure that such terms are consistent with the Project Licenses. The Eclipse Project will certify that the terms and conditions of its Non-Eclipse Content conform to the then-current licensing guidelines as provided by the EMO. No further approvals will be required from the EMO prior to the Eclipse Project placing the Non-Eclipse Content into the Repository.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;In short, it is the project team’s responsibility to run a tool, analyse the results, and certify the content as being consistent with the various conditions. It took us a while to &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=499950&quot;&gt;identify the &lt;em&gt;scan tool&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The Eclipse IP Team has been using open source &lt;a href=&quot;https://www.fossology.org/&quot;&gt;Fossology&lt;/a&gt; for a while. While Fossology is a very comprehensive tool that’s great for IP Analysts, our experience suggests that the learning curve is too steep for it to be used by committers. What we wanted to provide was a tool that could generate a simple report (both human and machine readable) containing a manifest and corresponding licensing.&lt;/p&gt;
&lt;p&gt;We found what we needed in &lt;a href=&quot;https://github.com/nexB/scancode-toolkit&quot;&gt;ScanCode&lt;/a&gt;, which is produced by some old friends at NexB. ScanCode has the ability to generate the manifest and summarize findings in a number of different formats, including HTML, JSON, and &lt;a href=&quot;https://spdx.org/&quot;&gt;SPDX&lt;/a&gt; RDF and Tag/Value. Using ScanCode is pretty easy. In fact, it’s so easy that the Webmaster integrated its use into an &lt;em&gt;Eclipse Genie&lt;/em&gt; script. So… &lt;strong&gt;for a project team to run the tool, all they really need to do is create a CQ&lt;/strong&gt;. The rest just happens automatically.&lt;/p&gt;
&lt;div class=&quot;wp-caption aligncenter&quot; id=&quot;attachment_5018&quot; style=&quot;width: 551px;&quot;&gt;&lt;img alt=&quot;license-certification-workflow&quot; class=&quot; size-full wp-image-5018 aligncenter&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/07/license-certification-workflow1.png?w=640&quot; /&gt;&lt;p class=&quot;wp-caption-text&quot;&gt;In cases where the third party content has a single white listed license, committers only need to create the CQ and then add the content to their builds. If Eclipse IP Team review is required, the committer may need to participate in that review.&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;To leverage this automatic scan, a project committer creates a &lt;em&gt;Type A&lt;/em&gt; &lt;a href=&quot;https://www.eclipse.org/projects/handbook/#ip-cq&quot;&gt;contribution questionnaire&lt;/a&gt; (CQ) in the usual way and attaches the corresponding source code. The magic happens after the PMC gives their approval: the Eclipse Genie process identifies every Type A third party content CQs that has been approved by the PMC, runs ScanCode on the source code attachments, and then attaches the report directly to the CQ.&lt;/p&gt;
&lt;p&gt;If a &lt;em&gt;single license&lt;/em&gt; is identified for all files in the third party content, and that license is on our white list (see below), then the CQ is automatically marked &lt;em&gt;license_certified&lt;/em&gt;, its license information is updated, and the CQ is marked resolved. If multiple licenses, blacklisted licenses, or otherwise problematic licenses are detected (i.e. anything other a single white listed license), then the CQ is sent to the Eclipse IP Team for further investigation.&lt;/p&gt;
&lt;p&gt;When you see something like the following on your CQ, you’re good-to-go.&lt;/p&gt;
&lt;p&gt;&lt;img alt=&quot;Screenshot from 2017-07-18 15-19-46&quot; class=&quot;  wp-image-4910 aligncenter&quot; height=&quot;387&quot; src=&quot;https://waynebeaton.files.wordpress.com/2017/07/screenshot-from-2017-07-18-15-19-46.png?w=489&amp;amp;h=387&quot; width=&quot;489&quot; /&gt;&lt;/p&gt;
&lt;p&gt;At this point, the content can be used in project builds and included in milestone builds. Once all project CQs are either marked as &lt;em&gt;license_certified&lt;/em&gt; (type A) or &lt;em&gt;approved&lt;/em&gt; (type B), the project can do an official release.&lt;/p&gt;
&lt;p&gt;I’m really curious to see what sort of hit rate we get on automatic license certification, vs. how many requests will have to be reviewed by the Eclipse IP Team. My hope is that we will get to a point where we have an 80% automatic approval rate; but we don’t have enough data to make a call yet.&lt;/p&gt;
&lt;p&gt;Our current implementation has the following licenses in the &lt;em&gt;white list&lt;/em&gt;:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Apache License 2.0&lt;/li&gt;
&lt;li&gt;Apache License 1.0&lt;/li&gt;
&lt;li&gt;Apache License 1.1&lt;/li&gt;
&lt;li&gt;BSD 2 Clause&lt;/li&gt;
&lt;li&gt;BSD 3 Clause&lt;/li&gt;
&lt;li&gt;BSD 4 Clause&lt;/li&gt;
&lt;li&gt;Eclipse Public License 1.0&lt;/li&gt;
&lt;li&gt;Eclipse Distribution License 1.0&lt;/li&gt;
&lt;li&gt;MIT License&lt;/li&gt;
&lt;li&gt;ISC License&lt;/li&gt;
&lt;li&gt;NTP License&lt;/li&gt;
&lt;li&gt;OpenSSL License&lt;/li&gt;
&lt;li&gt;Public Domain&lt;/li&gt;
&lt;li&gt;SIL OPEN FONT LICENSE&lt;/li&gt;
&lt;li&gt;W3C Software and Notice License&lt;/li&gt;
&lt;li&gt;zlib license&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;We need to &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=394613&quot;&gt;find a home&lt;/a&gt; for this. This list will grow.&lt;/p&gt;
&lt;p&gt;We’re using &lt;a href=&quot;https://bugs.eclipse.org/bugs/show_bug.cgi?id=496959&quot;&gt;Bug 496959&lt;/a&gt; to track our work to update our processes and documentation regarding the Eclipse IP Process.&lt;/p&gt;&lt;br /&gt;  &lt;a href=&quot;http://feeds.wordpress.com/1.0/gocomments/waynebeaton.wordpress.com/4911/&quot; rel=&quot;nofollow&quot;&gt;&lt;img alt=&quot;&quot; border=&quot;0&quot; src=&quot;http://feeds.wordpress.com/1.0/comments/waynebeaton.wordpress.com/4911/&quot; /&gt;&lt;/a&gt; &lt;img alt=&quot;&quot; border=&quot;0&quot; height=&quot;1&quot; src=&quot;https://pixel.wp.com/b.gif?host=waynebeaton.wordpress.com&amp;amp;blog=19425814&amp;amp;post=4911&amp;amp;subd=waynebeaton&amp;amp;ref=&amp;amp;feed=1&quot; width=&quot;1&quot; /&gt;</description>
	<pubDate>Wed, 19 Jul 2017 17:17:37 +0000</pubDate>
</item>

</channel>
</rss>
